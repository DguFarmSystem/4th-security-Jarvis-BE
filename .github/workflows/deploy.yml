
# 파일 위치: .github/workflows/deploy.yml

name: Deploy Project to GCP

# 'main' 브랜치에 코드가 푸시(push)될 때마다 이 워크플로우를 실행합니다.
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 저장소의 모든 파일을 워크플로우 실행 환경으로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. [핵심 변경] 저장소의 모든 파일을 서버의 배포용 폴더로 복사합니다.
      - name: Copy entire project to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          port: 22
          source: "."  # '.'은 저장소의 모든 파일 및 디렉터리를 의미합니다.
          target: "~/opensw-project" # 서버에 생성될 배포용 폴더 이름입니다.
          overwrite: true # 기존 파일이 있으면 덮어씁니다.

      # 3. SSH로 GCP 서버에 접속하여 배포 스크립트를 실행합니다.
      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          port: 22
          script: |
            # 1. [핵심 변경] 배포 폴더의 최신 설정 파일을 실제 설정 위치로 복사합니다.
            cp ~/opensw-project/teleport.yaml ~/teleport/config/teleport.yaml
            
            # 2. 기존과 동일하게 Docker 컨테이너를 재시작합니다.
            TELEPORT_IMAGE="public.ecr.aws/gravitational/teleport-distroless:17.5.2"
            sudo docker pull $TELEPORT_IMAGE
            sudo docker stop teleport || true
            sudo docker rm teleport || true
            sudo docker run -d --name teleport \
              --hostname openswdev.duckdns.org \
              -v ~/teleport/config:/etc/teleport \
              -v ~/teleport/data:/var/lib/teleport \
              -v /etc/letsencrypt:/etc/letsencrypt \
              -p 3023:3023 \
              -p 3025:3025 \
              -p 3080:3080 \
              $TELEPORT_IMAGE
            sudo docker image prune -f

