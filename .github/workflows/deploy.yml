# 파일 위치: .github/workflows/deploy.yml

name: CI/CD Backend API to GCP

on:
  push:
    branches: [ "main" ] # 'main' 브랜치에 푸시될 때 실행

env:
  # Docker Hub 사용자 이름과 이미지 이름을 설정합니다.
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/backend_api_i

jobs:
  # --------------------
  # CI: 빌드 및 이미지 푸시
  # --------------------
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 저장소의 소스 코드를 워크플로우 환경으로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker Hub에 로그인합니다. (GitHub Secrets 사용)
      - name: Login to Docker Hub
        uses: docker/login-action@v3  
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지를 빌드하고 Docker Hub에 푸시합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile이 있는 경로
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest # 'latest' 태그로 푸시

  # --------------------
  # CD: 서버에 배포
  # --------------------
  deploy-to-gcp:
    needs: build-and-push # 'build-and-push' 작업이 성공해야만 실행됩니다.
    runs-on: ubuntu-latest
    steps:
      # 1. GCP 서버에 SSH로 접속하여 배포 스크립트를 실행합니다.
      - name: Deploy to GCP
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            # Docker Hub에서 최신 이미지를 내려받습니다.
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
            
            # 기존에 실행 중인 backend-api-c 컨테이너가 있다면 중지하고 삭제합니다.
            if [ "$(docker ps -aq -f name=backend-api-c)" ]; then
                docker stop backend-api-c
                docker rm backend-api-c
            fi
            
            # 서버에 저장된 auth.pem 파일의 절대 경로를 지정합니다.
            # 이 경로는 실제 파일 위치에 맞게 수정해야 할 수 있습니다.
            AUTH_PEM_PATH="/home/${{ secrets.GCP_USERNAME }}/teleport-backend/auth.pem"
            
            # 최신 이미지로 새로운 컨테이너를 실행합니다.
            # --network: 'teleport-daemon'과 통신하기 위해 사설 네트워크에 연결합니다.
            # -v: 호스트의 auth.pem 파일을 컨테이너 내부의 /auth.pem 으로 마운트합니다.
            docker run -d --name backend-api-c \
              --network=teleport-net \
              -p 8080:8080 \
              -v ${AUTH_PEM_PATH}:/auth.pem \
              -e GITHUB_CLIENT_ID='${{ secrets.CLIENT_ID }}' \
              -e GITHUB_CLIENT_SECRET='${{ secrets.CLIENT_SECRET }}' \
              -e GITHUB_CALLBACK_URL='${{ secrets.CALLBACK_URL }}' \
              -e TELEPORT_PROXY_ADDR='${{ secrets.TELEPORT_PROXY_ADDR }}' \
              -e TELEPORT_AUTH_ADDR='${{ secrets.TELEPORT_AUTH_ADDR }}' \
              -e TELEPORT_IDENTITY_FILE='${{ secrets.TELEPORT_IDENTITY_FILE }}' \
              ${{ env.DOCKER_IMAGE_NAME }}:latest
